<html><head>
<title>サービステストヘルパ</title>
<meta http-equiv="X-UA-Compatible" content="IE=10" />
<link rel="stylesheet" href="css/base.css">
<script type="text/javascript" src="js/Utility.js" />
<script type="text/javascript" src="js/TableOperation.js" />
<script type="text/javascript" src="js/Connection.js" />
<script type="text/javascript" src="js/FileHandle.js" />
<script type="text/javascript" src="js/LexicalAnalyzer.js" />
<script type="text/javascript"><!--

var fs = new ActiveXObject("Scripting.FileSystemObject");
var TIMEOUT = 0;
var line_count = 0;
var obody;
var element;
var DATA = [];
//==============================================================================
function Execute(input, output) {
	document.getElementById('result').innerHTML = "";
	clearMessage();
	if(!input.match(/\.xlsx?$/)) { info('Excelファイルではありません:'.bold() + input); return; }
	if(!fs.FileExists(input)) { info('ファイルがありません:'.bold() + input); return; }

	var cn = new Connection(MSExcel12_OLE_Driver, {'file':input, readonly:1});
	if(!cn.exists) return;

	DATA = [];
	line_count = 0;
	var table = '';
	for(var i in cn.table) {
		if(cn.table[i].match(/処理説明/)) { table = cn.table[i]; break; }
	}
	if(table.length == 0) {
		info('処理説明タブがみつまりませんでした:'.bold() + input+ br + 'table=' + cn.table.join(','));
		return;
	}
	//==========================================================================
	// テーブルヘッダの構成
	//==========================================================================
	var tbl = document.createElement('table');
	var thd = document.createElement('thead');
	var tr	= document.createElement('TR');
	var head = ['№','箇所', '大区分', '中区分', '小区分', '項目', '入力', '確認内容'];
	for(var i in head) {
		var th = document.createElement('TH');
		th.innerHTML = head[i];
		tr.appendChild(th);
	}
	thd.appendChild(tr);
	tbl.appendChild(thd);
	
	//==========================================================================
	// 本体の読込
	//==========================================================================
	element = document.createElement('tbody');

	var TYPES = {
		'エンティティ'	: '(E)',
		'イベント'		: '(S)',
		'共有'			: '(Shr)',
		'メモリ'		: '(M)',
		'パラメータ'	: '(SG)',
		'アダプ'		: '(SG)',
		'API'			: '(API)',
		'戻り値'		: '(R)',
		'ログ'			: '',
		'なし'			: ''
	};
	var head = [];	// ヘッダ情報
	var area = {};	// 位置情報
	var linedata = {'処理名':''};

	cn.select("* FROM [" + table + "A1:IV999]");
	for(var line = 0; !cn.eof(); cn.next()) {
		// １行取得
		var values = [];
		for (var i = 0; i < cn.count(); i++) {
			var text = cn.item(i);
			var type = getType(text);
			if(type === 'Null') text = '';
			if(type !== 'String') text = new String(text);
			values[i] = text.replace(/^\s*(.*?)\s*$/, function(s,p){return p});
		}
		if(values.join('').length == 0) continue;		// データのない行は飛ばす
		if(0 == line && !values[1].match('処理名')) continue;		// ヘッダ部まで飛ばす

trace('line=' + line + ':value=' + values.join(','));

		line++;

		//======================================================================
		// ヘッダ部の処理
		//======================================================================
		while(line < 3) {
			var i = line - 1, text = '';
			if(!head[i]) head[i] = [];
			for(var j in values) {
				if(values[j].length > 0) text = values[j];
				head[i][j] = {'text': text};
			}
			if(line < 2) break;		// 一行目はヘッダデータを取るだけ

			// セルのマージ情報を憶測する
			for(var i in head) {	i = parseInt(i);
				for(var j in head[i]) {	j = parseInt(j); var obj = head[i][j];
					if(obj.hidden) continue;
					var text = obj.text;
					for(var jj = j + 1; jj < head[i].length; jj++) {
						obj.col = jj - j;
						var o = head[i][jj];
						if(o.hidden || (o.text.length > 0 && o.text !== text)) break;
						o.hidden = true;
					}
				}
			}
trace(['[HEAD]', head]);
			// 項目の位置情報の取得
			for(var j in values) {	j = parseInt(j);
				if(head[0][j].hidden && head[1][j].hidden) continue;
				var text = head[0][j].text + head[1][j].text;
				if(text.length == 0) continue;
				var col = head[1][j].col ? head[1][j].col : head[0][j].col;
				col = !col ? j : j + col;
				area[text] = {'begin':j, 'end': col};
			}
			// ヘッダの上下を比較して正しい位置情報にする
			var ar = [];
			for(var i in area) ar.push(i);
			ar.sort(function (a, b) { return area[a].begin - area[b].begin });
			for(var i in ar) {	i = parseInt(i);
				if(i == 0) continue;
				if(area[ar[i]].begin < area[ar[i-1]].end) area[ar[i-1]].end = area[ar[i]].begin;
			}
trace(['[AREA]', area]);
			break;
		}
		if(line < 3) continue;
		
		//======================================================================
		// 項目情報を取得する
		//======================================================================
		// 処理名
		//----------------------------------------------------------------------
		var text = getCells(area['処理名'], values);
		if(text.length > 0) {
			if(linedata['処理名'].length > 0) Output(linedata);
			linedata['処理名'] = text;
			linedata['入力種別'] = ''; linedata['入力項目'] = []; linedata['処理項目'] = '';
			linedata['出力種別'] = ''; linedata['出力項目'] = []; linedata['備考項目'] = '';
		}
		// 処理名がない場合は処理しない。
		if(linedata['処理名'].length == 0) continue;

		//----------------------------------------------------------------------
		// 備考
		//----------------------------------------------------------------------
		var text = getCells(area['備考項目'], values);
		if(text.length > 0) linedata['備考項目'] += text;

		//----------------------------------------------------------------------
		// 入出力データの取得
		//----------------------------------------------------------------------
		var ar = ['入力', '出力'];
		for(var i in ar) {
			var item = ar[i] + '項目', kind = ar[i] + '種別';
			var type = getCells(area[kind], values);
			var t = linedata[kind];
			if(type.length > 0) {
				t = '(?)';
				for(var j in TYPES) if(type.indexOf(j) >= 0) { t = TYPES[j]; break; }
				linedata[kind] = t;
			}
			var text = getCells(area[item], values);
			if(text.length > 0) linedata[item].push(text + t);
		}
		//----------------------------------------------------------------------
		// 処理項目
		//----------------------------------------------------------------------
		var text = getCells(area['処理項目'], values, "\t").replace(/\s+$/, '');
		linedata['処理項目'] += text + "\n";
	}
	if(linedata['処理名'].length > 0) Output(linedata);

	tbl.appendChild(element);
	document.getElementById('result').appendChild(tbl);

	cn.final();

	obody = new TableOperation(element);
    obody.doMarge();
    Export();
}

function ToggleMarge() {
    if(obody.marge) obody.unMarge();
    else obody.doMarge();
}

//==============================================================================
function getCells(obj, val, tab) {
	if(getType(tab) !== 'String') tab = '';
	var ret = '';
	for(var i = obj.begin; i < obj.end; i++)
		ret += (getType(val[i]) === 'String' ? val[i] : '') + tab;
	return ret;
}

//==============================================================================
function Output(linedata) {

//		text = text.replace(/\[T\.?B\.?D\].*$/, '');	// TBDを消す
	var process = linedata['処理項目'].replace(/\s+$/, '');

	var name = (linedata['処理名'] + "\n" + linedata['備考項目']).replace(/\s+$/, '');

	var input = arrayToString('入力項目');
	var result = arrayToString('出力項目');
	if(result.length > 0) result += 'が出力されること';

	function arrayToString(key) {
		var ret = '';
		for(var j in linedata[key]) ret += linedata[key][j] + "\n";
		return ret;
	}

	var Func = [];
	//var Func = [{'name': name, 'text': process.replace(/\t/gm, '　'), 'result': result}];
	var lex = new LexicalAnalyzer({'code':process.toOneByte(), 'comment':0, 'esc':''});
//putObject('LEX', lex.print().toHTML());
	var str = '', flag = true, subflag = false, autocr = false, sc = 0, spc = 0, space = -1;
	var reg = new RegExp('^(op_[^・☆★※○●◎◇◆□■▽△▼▲①-⑳]|(number|ident|string|char)_.*)$');
	for(var t = lex.begin(); !t.eof(); t = t.next()) {
		if(t.text.length <= 0) continue;
		if(t.text.match(/\n/)) { sc = 0; flag = true; }
		else if(flag && t.kind === 'space') sc += t.text.length;

		if(flag && t.kind === 'op') funcadd(name, result);

		if(flag && t.value().match(/op_[①-⑳]/)) { subflag = false; space = -1; }

		if(t.kind !== 'space' || (t.prv.value().match(reg) && t.nxt.value().match(reg))) {
			str += t.text;
			if(t.kind !== 'op') flag = false;
			if(t.value() === 'op_:' || t.kind === 'space') autocr = true;
			spc = sc;
		}

		if(t.value() === 'op_。') funcadd(name, result);
		if(autocr && t.value() === "space_\n") funcadd(name, result);	// おそらく表である
	}
	funcadd(name, result);

	function funcadd(name, result, big, mid, sml) {
		if(str.replace(/\s/mg, '').length > 0) {
			if(space >= 0 && space != spc) subflag = !subflag;
			if(subflag) {
				var obj = Func[Func.length - 1];
				obj.text += "\n  " + str;
			} else {
				var obj = {'name': name, 'text': str};
				if(result) obj.result = result;
				if(input)  obj.input = input;
				if(big) obj.big = '' + big;
				if(mid) obj.mid = '' + mid;
				if(sml) obj.sml = '' + sml;
				Func.push(obj);
			}
			space = spc;
			autocr = false;
		}
		str = '';
	}

	if(Func.length == 0) Func.push({'name': name, 'text': '', 'result': result});

trace(['[FUNC]', Func]);

	for(var i in Func) {
		var obj = Func[i];
		DATA.push(obj);
		line_count++;

		var tr = document.createElement('TR');
		var th = document.createElement('TH');
		th.align = 'right';
		th.style.fontSize = 'x-small';
		th.innerHTML = line_count;
		tr.appendChild(th);

		var Pos = document.createElement('TD');
		Pos.style.verticalAlign = 'top';
		if(obj.name) Pos.innerHTML = obj.name.toHTML();
		tr.appendChild(Pos);

		var ar = ['big', 'mid', 'sml'];
		for(var j in ar) {
			var td = document.createElement('TD');
			td.style.verticalAlign = 'top';
			td.className = 'nomarge';
			td.innerHTML = sp;
			if(obj[ar[j]]) td.innerHTML = obj[ar[j]].toHTML();
			tr.appendChild(td);
		}

		var Main = document.createElement('TD');
		Main.style.verticalAlign = 'top';
		Main.className = 'nomarge';
		Main.innerHTML = obj.text.toHTML();;
		tr.appendChild(Main);
		
		var Input = document.createElement('TD');
		Input.style.verticalAlign = 'top';
		Input.className = 'nomarge';
		Input.innerHTML = obj.input ? obj.input.toHTML() : sp;
		tr.appendChild(Input);
		
		var Result = document.createElement('TD');
		Result.style.verticalAlign = 'top';
		Result.className = 'nomarge';
		Result.innerHTML = obj.result ? obj.result.toHTML() : sp;
		tr.appendChild(Result);
		
		element.appendChild(tr);
	}
}

function Export() {
	var text = '';
	for(var i in DATA) {
		var obj = DATA[i];
		var arr = [];
		var ar = ['name', 'big', 'mid', 'sml', 'text', 'input', 'result'];
		for(var j in ar) {
			var o = obj[ar[j]];
			if(getType(o) !== 'String') o = '';
			arr.push('"' + o.replace(/"/gm, '""') + '"');	// '
		}
		text += arr.join("\t") + "\n";
	}
	document.getElementById('copytext').value = text;
}


//==============================================================================

//--></script>
</head>
<body>


<form name="form"><input type="text" name="debug" size=1><br>
<table style="font-size:x-small;" border=0>
<tr><td>[入力]</td><td>サービス定義書</td><td id='service'></td><tr>
<tr style="display:none"><td>[出力]</td><td>試験項目書(サービス)</td><td id='testcase'></td><tr>
</table>
<input type="button" name="execute" value=" 実行 "><input type="button" onclick="ToggleMarge();" value="表示切替">
</form>
<div id="result"></div><BR>
コピペ用テキスト⇒<textarea id='copytext'></textarea>
</body><script type="text/javascript"><!--

var ff_Service = new CreateFileField('service', GetFileName().replace(/\.[^\.]*$/, '.service.ini'), true);
var ff_TestCase= new CreateFileField('testcase', GetFileName().replace(/\.[^\.]*$/, '.testcase.ini'), true);

//==============================================================================
//イベント定義
//==============================================================================
document.form.execute.onclick = function() {
	DEBUG = parseInt('0'+document.form.debug.value);
	Execute(ff_Service.path.value, ff_TestCase.path.value);
	ff_Service.write();
	ff_TestCase.write();
}

//--></script>

</html>
